name: Deploy PWA to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  NODE_VERSION: 20
  # Para Pages de projeto: https://<user>.github.io/<repo>/
  BASE_PATH: /${{ github.event.repository.name }}/
  # NPM envs que o pnpm também respeita para baixar do registry oficial
  NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
  NPM_CONFIG_PREFER_ONLINE: true
  NPM_CONFIG_FETCH_RETRIES: 5
  NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: 20000
  NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: 120000
  NPM_CONFIG_NETWORK_CONCURRENCY: 1
  NPM_CONFIG_STRICT_SSL: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: '' # sem cache para evitar reuso de tarballs ruins

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps (pnpm, com retries)
        run: |
          set -e
          # tente 3x
          for i in 1 2 3; do
            echo ">> pnpm install (tentativa $i/3)"
            # se houver lock, respeita; se não houver, gera
            pnpm install --reporter=silent || true
            if [ -d node_modules ]; then break; fi
            echo "Falhou. Limpando store e tentando de novo..."
            pnpm store prune || true
            rm -rf node_modules
            pnpm cache clear --force || true
            sleep 5
          done
          # última cartada
          if [ ! -d node_modules ]; then
            echo ">> fallback: pnpm install novamente"
            pnpm install --reporter=silent
          fi

      - name: Build (Vite) com base do Pages
        run: |
          pnpm build -- --base=${{ env.BASE_PATH }} || pnpm build
          # garantir PWA assets no dist (se estiverem na raiz ou /public)
          for f in manifest.json sw.js apple-touch-icon.png icon-192x192.png icon-512x512.png; do
            [ -f "$f" ] && cp -f "$f" dist/ || true
            [ -f "public/$f" ] && cp -f "public/$f" dist/ || true
          done

      - name: Patch manifest start_url/scope
        run: |
          if [ -f dist/manifest.json ]; then
            sudo apt-get update -y >/dev/null 2>&1
            sudo apt-get install -y jq >/dev/null 2>&1
            jq --arg base "${BASE_PATH}" '.start_url=$base | .scope=$base' dist/manifest.json > dist/manifest.tmp
            mv dist/manifest.tmp dist/manifest.json
          fi

      - name: SPA fallback (404 -> index)
        run: |
          [ -f dist/index.html ] && cp dist/index.html dist/404.html || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
